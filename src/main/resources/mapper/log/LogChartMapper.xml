<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.manager.dbee.dao.log.LogChartDAO">

	<!-- 0. 특정 날짜 테이블이 존재하는지 확인 -->
	<select id="checkLogTableExists" resultType="int">
		SELECT COUNT(*)
		FROM
		information_schema.tables
		WHERE table_schema = #{schema}
		AND table_name
		= #{tableName}
	</select>

	<!-- 로그 테이블의 src_ip 값이 정책 테이블의 src_ip_start~src_ip_end 사이에 있는지 체크하는 메서드 -->
	<!-- <select id="selectLogWithPolicyByDate" resultType="map"> SELECT l.src_ip, 
		l.p_id, p.name AS policy_name FROM ${tableName} l JOIN IPS_Policy.Policy 
		p ON INET_ATON(l.src_ip) BETWEEN INET_ATON(p.src_ip_start) AND INET_ATON(p.src_ip_end) 
		WHERE l.detected_dt BETWEEN #{startDate} AND #{endDate} </select> -->



	<!-- 1. 특정 날짜의 원하는 시간대 범위별, IP별 통계(국가 기준 top 10) xml (정적 통계) -->
	<!-- 나중에 js든 서비스든 어디에서든 지금이 6시 30분이면 지금까지 쌓인 통계를 보도록 강제하는 처리가 필요하겠군! -->
	<select id="selectTopSrcIpCounts" resultType="map">
		SELECT src_ip, COUNT(*) as cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY src_ip
		ORDER BY cnt DESC
	</select>


	<!-- 1.1 특정 날짜의 원하는 시간대 범위별, IP별 통계(국가 기준 top 10) xml (정적 통계), 관리자가 top 
		N 선택 -->
	<select id="selectTopSrcIpCounts2" resultType="map"
		parameterType="map">
		SELECT src_ip, COUNT(*) as cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY src_ip
		ORDER BY cnt DESC
		LIMIT #{topN}
	</select>


	<!-- 2. 원하는 날짜 기간별 IP 통계 (국가 기준 top 10) xml (동적 통계) -->
	<!-- 날짜 계산, 테이블 목록 준비, 파라미터 구성, 국가별 매핑 수행은 자바에서 한다 -->
	<select id="selectTopCountryCountsByTables" resultType="map"
		parameterType="map">
		SELECT src_ip, COUNT(*) AS cnt
		FROM (
		<foreach collection="tableList" item="tableName"
			separator="UNION ALL">
			SELECT src_ip, detected_dt
			FROM ${tableName}
			WHERE
			detected_dt &gt;= #{startDate}
			AND detected_dt &lt; #{endDate}
		</foreach>
		) AS union_logs
		GROUP BY src_ip
		ORDER BY cnt DESC
		LIMIT 100
	</select>


	<!-- 국가별 top 10은 1, 2번 쿼리로 한다 아래는 1,2 백엔드, 프론트엔드까지 하고 제대로 됐나 체크한다 -->

	<!-- 3. 특정 날짜의 원하는 시간대 범위별 p_id 위반 top 10 -->
	<select id="selectTopPid" resultType="map">
		select p_id, count(*) as cnt
		from ${tableName}
		<where>
			detected_dt between #{startDate} and #{endDate}
		</where>
		group by p_id
		order by cnt DESC
		limit 10
	</select>


	<!-- 4. 시간대별 탐지 수 (1시간 단위), 이미 기록된 데이터만 조회 -->
	<select id="selectHourlyStats" resultType="map">
		SELECT
		DATE_FORMAT(detected_dt, '%H') AS hour,
		COUNT(*) AS cnt
		FROM
		${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY DATE_FORMAT(detected_dt, '%Y-%m-%d %H:00:00')
		ORDER BY hour
		ASC
	</select>

	<!-- 시간대별 탐지 수 (2시간 단위), 이미 기록된 데이터만 조회(확정통계) -->
	<!-- FLOOR(5.7)=5, LPAD(str, len, pad_char)은 str을 왼쪽에 pad_char를 str의 길이가 
		len이 될 때까지 넣음 -->
	<select id="selectTwoHourStats" resultType="map">
		SELECT
		CONCAT(
		DATE_FORMAT(detected_dt, '%Y-%m-%d '),
		LPAD(FLOOR(HOUR(detected_dt) / 2) * 2, 2, '0'),
		':00:00'
		) AS
		two_hour_block,
		COUNT(*) AS cnt
		FROM log_${date}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY two_hour_block
		ORDER BY two_hour_block
	</select>


	<!-- 5. 정책 타입별 탐지 건수 통계 -->
	<select id="selectPolicyTypeStats" resultType="map">
		SELECT
		policy_type,
		COUNT(*) as cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY policy_type
	</select>

	<!-- 6. 위험도(LOW, MEDIUM, HIGH, CRITICAL)별 탐지 건수 통계 -->
	<select id="selectThreatLevelStats" resultType="map">
		SELECT
		threat_level,
		COUNT(*) as cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY threat_level
	</select>

	<!-- 7. 시간대별 정책 타입 분포 통계 -->
	<select id="selectHourlyPolicyStats" resultType="map">
		select
		DATE_FORMAT(detected_dt, '%H') AS hour,
		policy_type,
		count(*) AS
		cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY hour, policy_type
		ORDER BY hour ASC
	</select>

	<!-- 8. 시간대별 위험도 분포 통계 -->
	<select id="selectHourlyThreatStats" resultType="map">
		select
		DATE_FORMAT(detected_dt, '%H') AS hour,
		threat_level,
		count(*) AS
		cnt
		FROM ${tableName}
		<where>
			detected_dt BETWEEN #{startDate} AND #{endDate}
		</where>
		GROUP BY hour, threat_level
		ORDER BY hour ASC
	</select>

	<!-- 9. 기간별 정책 평균 위반 수 통계 -->
	<select id="selectTopPolicyAvgViolations" resultType="map">
		SELECT
		p.p_id,
		p.name,
		ROUND(COALESCE(SUM(v.cnt), 0) /
		(DATEDIFF(#{endDate}, #{startDate}) + 1), 2) AS avg_violation
		FROM
		IPS_Policy.Policy p
		LEFT JOIN (
		<foreach collection="tableNames" item="tableName"
			separator="UNION ALL">
			SELECT p_id, COUNT(*) AS cnt
			FROM ${tableName}
			<where>
				detected_dt BETWEEN #{startDate} AND #{endDate}
			</where>
			GROUP BY p_id
		</foreach>
		) v ON p.p_id = v.p_id
		GROUP BY p.p_id, p.name
		ORDER BY avg_violation
		DESC
		LIMIT #{topN}
	</select>

	<!-- 10. 실시간 TopN src_ip (최근 1시간) -->
	<select id="selectTopSrcIpRealTime" resultType="map"
		parameterType="map">
		SELECT
		src_ip,
		count(*) AS cnt,
		MAX(detected_dt) AS
		last_seen,
		GROUP_CONCAT(DISTINCT p_id) AS policies
		FROM ${tableName}
		WHERE detected_dt &gt;=NOW() -
		INTERVAL 1 HOUR
		GROUP BY src_ip
		ORDER BY
		cnt DESC,
		INET_ATON(src_ip) ASC
		LIMIT #{topN}
	</select>


	<!-- 10.1 일간 TopN src_ip -->
	<select id="selectTopSrcIpCounts3" parameterType="map"
		resultType="map">
		SELECT
		src_ip,
		COUNT(*) AS total_cnt,
		MAX(detected_dt) AS
		last_seen,
		GROUP_CONCAT(DISTINCT p_id) AS policies
		FROM ${tableName}
		WHERE detected_dt BETWEEN #{startDate} AND #{endDate}
		GROUP BY src_ip
		ORDER BY total_cnt DESC,
		INET_ATON(src_ip) ASC
		LIMIT #{topN}
	</select>

	<!-- 0707 추가: 최근 N분간 건수 조회 -->
	<select id="selectRecentCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM ${tableName}
		WHERE detected_dt >=
		NOW() - INTERVAL #{lastMinutes} MINUTE
	</select>

	<!-- 0708 추가: 하루 전체 건수 조회 매퍼 -->
	<select id="selectCountByDateRange" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM ${tableName}
		WHERE detected_dt
		BETWEEN #{startDate} AND #{endDate}
	</select>

	<!-- 0708 추가: 실시간 차단 건수 조회: action 필터 추가 -->
	<select id="selectBlockCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM ${tableName}
		WHERE detected_dt >=
		NOW() - INTERVAL #{lastMinutes} MINUTE
		AND action = 'BLOCK_LOG'
	</select>

	<!-- 0708 추가: 실시간 차단 비율 조회 -->
	<select id="selectBlockRatioByLastMinutes" 
		resultType="com.manager.dbee.dto.BlockRatioResponse">
		<![CDATA[
		SELECT
		SUM(CASE WHEN action = 'BLOCK_LOG' THEN 1 ELSE 0 END) AS blockCnt,
		COUNT(*) AS totalCnt,
		ROUND(
			100 * SUM(CASE WHEN action = 'BLOCK_LOG' THEN 1 ELSE 0 END) / COUNT(*), 2) 
			AS blockRatio
		FROM ${tableName}
		WHERE detected_dt >= NOW() - INTERVAL #{lastMinutes} MINUTE
		]]>
	</select>

	<!-- 0708 추가: 오늘 하루치 차단 비율 -->
	<select id="selectBlockRatioToday" resultType="map"
		parameterType="map">
		SELECT
		SUM(action='BLOCK_LOG') AS blockCnt,
		COUNT(*) AS totalCnt,
		ROUND(100 * SUM(action='BLOCK_LOG') / COUNT(), 2) AS blockRatio
		FROM ${tableName}
		WHERE DATE(detected_dt) = CURDATE()
	</select>
	
	

</mapper>